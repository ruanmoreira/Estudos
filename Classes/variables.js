// Meu primeiro arquivo JavaScript
console.log("Ol√°, mundo! JavaScript est√° funcionando! üéâ");

// Vamos aprender sobre vari√°veis
let nome = "Ruan Moreira";
const idade = 24;
var cidade = "Santo Andre"; // var √© mais antigo, vamos usar let/const

console.log("Nome:", nome);
console.log("Idade:", idade);
console.log("Cidade:", cidade);



// # Duvidas 
// Q: Quais as diferen√ßas entre let, const e var?
// A: 
//    - var: mais antigo, escopo de fun√ß√£o, pode ser redeclarado
//    - let: moderno, escopo de bloco, pode ser reatribu√≠do mas n√£o redeclarado
//    - const: moderno, escopo de bloco, n√£o pode ser reatribu√≠do nem redeclarado

// Q: Por que var √© menos seguro?
// A: var tem escopo de fun√ß√£o (n√£o de bloco), pode ser redeclarado, e sofre hoisting

// Q: O que √© escopo de bloco? Me d√™ exemplos:
// A: Escopo de bloco significa que a vari√°vel s√≥ existe dentro do bloco onde foi declarada

// Exemplo 1: var vaza para fora do bloco (escopo de fun√ß√£o)
if (true) {
    var exemploVar = "Estou vazando!";
}
console.log("Var fora do bloco:", exemploVar); // Funciona! var vaza

// Exemplo 2: let/const ficam confinados ao bloco
if (true) {
    let exemploLet = "Fico no bloco";
    const exemploConst = "Eu tamb√©m!";
    console.log("Dentro do bloco:", exemploLet, exemploConst);
}
// console.log(exemploLet); // Erro! exemploLet n√£o existe aqui
// console.log(exemploConst); // Erro! exemploConst n√£o existe aqui

// Exemplo 3: Redeclara√ß√£o
var podeRedeclarar = "primeiro";
var podeRedeclarar = "segundo"; // var permite redeclara√ß√£o

let naoPodeRedeclarar = "primeiro";
// let naoPodeRedeclarar = "segundo"; // Erro! let n√£o permite redeclara√ß√£o

// Exemplo 4: Reatribui√ß√£o
let podeReatribuir = "valor inicial";
podeReatribuir = "novo valor"; // let permite reatribui√ß√£o

const naoPodeReatribuir = "valor fixo";
// naoPodeReatribuir = "tentativa de mudan√ßa"; // Erro! const n√£o permite reatribui√ß√£o 

// Q: O que √© hoisting?
// A: Hoisting √© quando o JavaScript "levanta" (move para o topo) as declara√ß√µes de vari√°veis e fun√ß√µes
//    durante a fase de compila√ß√£o, antes da execu√ß√£o do c√≥digo. √â como se as declara√ß√µes fossem
//    movidas para o in√≠cio do escopo.

// Exemplo 1: Hoisting com var
console.log("Antes da declara√ß√£o:", minhaVar); // undefined (n√£o d√° erro!)
var minhaVar = "Ol√°!";
console.log("Depois da declara√ß√£o:", minhaVar); // "Ol√°!"

// O que acontece internamente (hoisting):
// var minhaVar; // declara√ß√£o √© "levantada" para o topo
// console.log("Antes da declara√ß√£o:", minhaVar); // undefined
// minhaVar = "Ol√°!"; // atribui√ß√£o permanece no lugar
// console.log("Depois da declara√ß√£o:", minhaVar); // "Ol√°!"

// Exemplo 2: Hoisting com let/const (Temporal Dead Zone)
// console.log("Antes da declara√ß√£o:", minhaLet); // Erro! Cannot access before initialization
let minhaLet = "Teste";
console.log("Depois da declara√ß√£o:", minhaLet); // "Teste"

// Exemplo 3: Hoisting de fun√ß√µes
digaOla(); // Funciona! A fun√ß√£o √© "levantada"

function digaOla() {
    console.log("Ol√°! Esta fun√ß√£o foi hoisted!");
}

// Exemplo 4: Hoisting de function expression (n√£o funciona)
// digaTchau(); // Erro! Cannot access before initialization

const digaTchau = function() {
    console.log("Tchau! Esta fun√ß√£o N√ÉO foi hoisted!");
};

digaTchau(); // Agora funciona

// Exemplo 5: Problema comum com hoisting (bug!)
var nomeGlobal = "Jo√£o"; 
function mostrarNome() {
    console.log("Nome dentro da fun√ß√£o:", nomeGlobal); // undefined! (n√£o "Jo√£o")
//    let nomeGlobal = "Maria"; // Esta declara√ß√£o √© "levantada" para o topo da fun√ß√£o, fazendo com que fique undefined
}
mostrarNome(); // Mostra "undefined" em vez de "Jo√£o"

// O que acontece internamente:
// function mostrarNome() {
//     var nomeGlobal; // declara√ß√£o √© "levantada" para o topo da fun√ß√£o
//     console.log("Nome dentro da fun√ß√£o:", nomeGlobal); // undefined
//     nomeGlobal = "Maria"; // atribui√ß√£o permanece aqui
// }

// Por isso √© melhor usar let/const - eles n√£o sofrem desse problema!


// =============================
// TEMPLATE LITERALS (ES6)
// =============================
// O que √©: Sintaxe de string com crases (`) que permite interpola√ß√£o `${expr}` e multilinhas.
// Por que usar: Deixa mensagens din√¢micas mais leg√≠veis do que concatena√ß√£o com + e suporta multilinhas.

const tlNome = "Ruan";
const tlIdade = 24;
const tlCidade = "Santo Andr√©";

// Antes (concatena√ß√£o):
const mensagemConcat = "Meu nome √© " + tlNome + ", tenho " + tlIdade + " anos e moro em " + tlCidade;

// Agora (template literal):
const mensagemTemplate = `Meu nome √© ${tlNome}, tenho ${tlIdade} anos e moro em ${tlCidade}`;

console.log("TL - concat:", mensagemConcat);
console.log("TL - template:", mensagemTemplate);

// Multilinhas e express√µes inline
const bloco = `Linha A
Multilinha real
Soma: ${2 + 2}`;
console.log("TL - multilinhas:", bloco);

// Fun√ß√£o dentro do template
const pluralizarAno = (anos) => `${anos} ano${anos === 1 ? "" : "s"}`;
console.log(`TL - fun√ß√£o inline: tenho ${pluralizarAno(tlIdade)}`);

